@mixin alink ($link, $visit, $hover, $active) {
  a {
    color: $link;
    &:visited {
      color: $visit;
    }
    &:hover {
      color: $hover;   
    }
    &:active {
      color: $active;
    }
  }
}


// Browser Prefixes
@mixin transform($transforms) {
  -webkit-transform: $transforms;
  -moz-transform: $transforms;
  -ms-transform: $transforms;
  transform: $transforms;
}

// Rotate
@mixin rotate ($deg) { 
  @include transform(rotate(#{$deg}deg));
}

// Scale
@mixin scale($scale) {
  @include transform(scale($scale));
}

// Translate
@mixin translate ($x, $y) {
  @include transform(translate($x, $y));
}

// Skew
@mixin skew ($x, $y) {
  @include transform(skew(#{$x}deg, #{$y}deg));
}

// Transform Origin
@mixin transform-origin ($origin) {
      -webkit-transform-origin: $origin;
      -moz-transform-origin: $origin;
  -ms-transform-origin: $origin;
  transform-origin: $origin;
}

@mixin breakpoint($point) {
    @if $point==desktop {
        @media (min-width: 70em) {
            @content ;
        }
    }
    @else if $point==laptop {
        @media (min-width: 64em) {
            @content ;
        }
    }
    @else if $point==tablet {
        @media (min-width: 50em) {
            @content ;
        }
    }
    @else if $point==phablet {
        @media (min-width: 37.5em) {
            @content ;
        }
    }
    @else if $point==mobileonly {
        @media (max-width: 37.5em) {
            @content ;
        }
    }
}

@function set-notification-text-color($color) {
    @if (lightness($color) > 50) {
        @return #000000; // Lighter backgorund, return dark color
    }
    @else {
        @return #ffffff; // Darker background, return light color
    }
}

@media (min-aspect-ratio: 16/9) {
    .fullscreen-bg__video {
        width: 100%;
        height: auto;
    }
}

@media (max-aspect-ratio: 16/9) {
    .fullscreen-bg__video {
        width: auto;
        height: 100%;
    }
}


@mixin full() {
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
}

@mixin centerer() {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

@mixin vertcenterer() {
    position: absolute;
    top: 50%;
    transform: translate(0%, -50%);
}

@mixin horizcenterer() {
    position: absolute;
    left: 50%;
    transform: translate(-50%, 0%);
}

@mixin flexcenterer(){
  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin aspect-ratio($width, $height) {
  position: relative;
  aspect-ratio: $width / $height;
  /*
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  > div.content, > img, div.video {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
  */
}

@mixin aspect-ratio-overflow($width, $height) {
  position: relative;
  overflow: hidden;
  display: block;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  > img:first-of-type {
    position: absolute;
    top: 0;
    left: 0;
    object-fit: cover;
    width: 100%;
    height: 100%;
  }
}

@mixin responsive-gap($screenWidth, $colGap, $rowGap) {
  row-gap: (($rowGap/$screenWidth) * 100vw) !important;
  column-gap: (($colGap/$screenWidth) * 100vw) !important;
}

@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}

@mixin alink ($link, $visit, $hover, $active) {
  a {
    color: $link;
    &:visited {
      color: $visit;
    }
    &:hover {
      color: $hover;   
    }
    &:active {
      color: $active;
    }
  }
}

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin appearance($value: none) {
    -webkit-appearance:     $value;
    -moz-appearance:        $value;
    -ms-appearance:         $value;
    -o-appearance:          $value;
    appearance:             $value;
}

@mixin placeholder {
  &::-webkit-input-placeholder {@content}
  &:-moz-placeholder           {@content}
  &::-moz-placeholder          {@content}
  &:-ms-input-placeholder      {@content}  
}


@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  border-radius: $radius;
  background-clip: padding-box;  /* stops bg color from leaking outside the border: */
}

// Single side border-radius

@mixin border-top-radius($radius) {
  -webkit-border-top-right-radius: $radius;
  border-top-right-radius: $radius;
   -webkit-border-top-left-radius: $radius;
   border-top-left-radius: $radius;
   background-clip: padding-box;
}
@mixin border-right-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
     -webkit-border-top-right-radius: $radius;
     border-top-right-radius: $radius;
     background-clip: padding-box;
}
@mixin border-bottom-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
   -webkit-border-bottom-left-radius: $radius;
   border-bottom-left-radius: $radius;
   background-clip: padding-box;
}
@mixin border-left-radius($radius) {
  -webkit-border-bottom-left-radius: $radius;
  border-bottom-left-radius: $radius;
     -webkit-border-top-left-radius: $radius;
     border-top-left-radius: $radius;
     background-clip: padding-box;
}


@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;
  $extmods: ( eot: "?", svg: "#" + str-replace($name, " ", "_") );
  $formats: ( otf: "opentype", ttf: "truetype" );
  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
  }
  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}


@mixin no-select() {
  -webkit-user-select: none;  /* Chrome all / Safari all */
  -moz-user-select: none;     /* Firefox all */
  -ms-user-select: none;      /* IE 10+ */
  user-select: none;          /* Likely future */  
}  